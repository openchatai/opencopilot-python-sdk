# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.jsonable_encoder import jsonable_encoder
from ...core.remove_none_from_dict import remove_none_from_dict

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class ChatClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def init(self, *, x_bot_token: str) -> None:
        """
        Parameters:
            - x_bot_token: str.
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "chat/init"),
            headers=remove_none_from_dict({**self._client_wrapper.get_headers(), "X-Bot-Token": x_bot_token}),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def send(self, *, content: str, headers: typing.Any, x_bot_token: str) -> None:
        """
        Parameters:
            - content: str.

            - headers: typing.Any.

            - x_bot_token: str.
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "chat/send"),
            json=jsonable_encoder({"content": content, "headers": headers}),
            headers=remove_none_from_dict({**self._client_wrapper.get_headers(), "X-Bot-Token": x_bot_token}),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncChatClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def init(self, *, x_bot_token: str) -> None:
        """
        Parameters:
            - x_bot_token: str.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "chat/init"),
            headers=remove_none_from_dict({**self._client_wrapper.get_headers(), "X-Bot-Token": x_bot_token}),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def send(self, *, content: str, headers: typing.Any, x_bot_token: str) -> None:
        """
        Parameters:
            - content: str.

            - headers: typing.Any.

            - x_bot_token: str.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "chat/send"),
            json=jsonable_encoder({"content": content, "headers": headers}),
            headers=remove_none_from_dict({**self._client_wrapper.get_headers(), "X-Bot-Token": x_bot_token}),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
